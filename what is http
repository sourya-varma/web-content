HTTP Explained

HTTP

HTTP is a protocol which allows the fetching of resources, such as HTML documents. It is the foundation of any data exchange on the Web and it is a client-server protocol, which means requests are initiated by the recipient, usually the Web browser. A complete document is reconstructed from the different sub-documents fetched, for instance text, layout description, images, videos, scripts, and more.

(((((((SEARCH IMAGE FOR HTTP IMAGE EXPLANATION)))))

Clients and servers communicate by exchanging individual messages (as opposed to a stream of data). The messages sent by the client, usually a Web browser, are called requests and the messages sent by the server as an answer are called responses.


(((((((SEARCH IMAGE FOR HTTP IMAGE EXPLANATION)))))

Designed in the early 1990s, HTTP is an extensible protocol which has evolved over time. It is an application layer protocol that is sent over TCP, or over a TLS-encrypted TCP connection, though any reliable transport protocol could theoretically be used. Due to its extensibility, it is used to not only fetch hypertext documents, but also images and videos or to post content to servers, like with HTML form results. HTTP can also be used to fetch parts of documents to update Web pages on demand.

HTTP flow

When a client wants to communicate with a server, either the final server or an intermediate proxy, it performs the following steps:

Open a TCP connection: The TCP connection is used to send a request, or several, and receive an answer. The client may open a new connection, reuse an existing connection, or open several TCP connections to the servers.

Send an HTTP message: HTTP messages (before HTTP/2) are human-readable. With HTTP/2, these simple messages are encapsulated in frames, making them impossible to read directly, but the principle remains the same. For example:

GET / HTTP/1.1
Host: developer.mozilla.org
Accept-Language: fr

Read the response sent by the server, such as:

HTTP/1.1 200 OK
Date: Sat, 09 Oct 2010 14:28:02 GMT
Server: Apache
Last-Modified: Tue, 01 Dec 2009 20:18:22 GMT
ETag: “51142bc1-7449-479b075b2891b”
Accept-Ranges: bytes
Content-Length: 29769
Content-Type: text/html

Close or reuse the connection for further requests.

HTTP Messages

HTTP messages, as defined in HTTP/1.1 and earlier, are human-readable. In HTTP/2, these messages are embedded into a binary structure, a frame, allowing optimizations like compression of headers and multiplexing. Even if only part of the original HTTP message is sent in this version of HTTP, the semantics of each message is unchanged and the client reconstitutes (virtually) the original HTTP/1.1 request. It is therefore useful to comprehend HTTP/2 messages in the HTTP/1.1 format.

There are two types of HTTP messages, requests and responses, each with its own format.

Requests

A HTTP request consists of

Host (required) — (Example: developer.mozilla.org)
Method (required) — (Example: GET)
Path (required) —(Example: /)
Headers (optional) — (Example: Content-Type: application/json)
HTTP version (required) — (Example: HTTP/1.1)
Query String (optional) — (Example: ?q=test)
Body (optional) — (Example: {“q”: “test”})
Lets understand each of these with the following example request

GET /search?q=test HTTP/1.1
Host: www.bing.com
User-Agent: curl/7.54.0
Accept: /
Content-Type: application/json

Host

GET /search?q=test HTTP/2
Host: www.bing.com
User-Agent: curl/7.54.0
Accept: /

In the above, the second line with “Host”, defines which website the request is to be made to. In this case, the request will be sent to the Bing website. If this was changed to “www.google.com”, the request would go to Google.

Method

GET /search?q=test HTTP/2
Host: www.bing.com
User-Agent: curl/7.54.0
Accept: /

In the above request, “GET” is the HTTP method, which is a way for the request to specify what it generally wants to do.
Here are some common HTTP methods and what they are intended for:
GET — retrieves data, like a blog article.
POST — creates data, like a new blog article.
PUT — replaces data, like an existing blog article.
DELETE — deletes data, like an existing blog article.
So, our example request using the GET method, says: “Please retrieve some data for me.”

Path

GET /search?q=test HTTP/2
Host: www.bing.com
User-Agent: curl/7.54.0
Accept: /

In the above, /search on the first line is the path. Coupled with the method, the path tells the website what the request specifically wants to do.
In this case, GET /search says: “Please retrieve the results of a search for me.”

Headers

GET /search?q=test HTTP/2
Host: www.bing.com
User-Agent: curl/7.54.0
Accept: /

In the above, the lines under the Host are headers. Headers are additional data that help a website determine what response to make for the request.

For example:

Accept: / tells the website that any type of response is okay. This could be made more specific.
User-Agent: curl/7.54.0 tells the website which application is used to make the request.
For example, this might typically say something like Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:68.0) Gecko/20100101 Firefox/68.0 if you’re making the request from the Mac version of Firefox.
In the above case, a command-line tool, cURL, was used to make the request.

Any additional headers may be provided on following lines. A famous type of header is the “cookie” header, which is used to pass reusable data to the website on each request.
For example, if logged-in, a user’s “session” may be passed each time to the website so a user doesn’t have to pass a username and password each time a request is made.

Query String

GET /search?q=test HTTP/2
Host: www.bing.com
User-Agent: curl/7.54.0
Accept: /

In the above, ?q=test is the query string which provides additional information to the website to help it fulfill its request.
Remember, in this example, we are telling Bing: “Please retrieve the results of a search for me.” We didn’t yet specify any arguments of what to search for. The query string provides these arguments.

/search?q=test

In the above, q is an argument and test is a value. This is passed to the website’s server and provides additional information on how to fulfill the request.
In the case of our request specifically, we are now saying: “Please retrieve the results of a search for me, where the search value is ‘test’.”
If we need to pass additional values in the query string, we separate them with an ampersand (&) like so:
?q=test&query_argument_2=value_2&query_argument_3=value=3

Request Body

GET /search?q=test HTTP/2
Host: www.bing.com
User-Agent: curl/7.54.0
Accept: /
{ “q”: “test” }

A query string is not the only way to pass additional information to the website. A request body is a means of doing the same.
It is typically not used with a GET request but I’ve added it above for the sake of an example. Typically, it is used with methods such as POST and PUT which are heavier on data transmission as they specify data to be recorded.
In the above, after the headers and an empty line, { “q”: “test” } is the request body which provides additional information to the website to help it fulfill its request, much like a query string does.
Passing data in the body has a few advantages to a query string and a few disadvantages.

Advantages:

There is no data size limit. Query strings have a maximum size limit (specific to the browser) and therefore aren’t good for transmitting a large amount of information.
The data is recorded and retrievable in fewer places and is, therefore, more secure. Placing sensitive data, like passwords, in query strings is problematic (read more in this HttpWatch article).
Disadvantages:

The request body is hidden from the user and cannot be easily shared with another person. Query strings are good for “hey, check out this link” situations since the values are stored in the link and can easily be copy/pasted to another person.
HTTP Version

GET /search?q=test HTTP/2
Host: www.bing.com
User-Agent: curl/7.54.0
Accept: /

In the above, HTTP/2 on the first line is the HTTP version. Different versions of HTTP handle the details of the interaction between machines differently. The versions commonly used today are HTTP/1.1 and HTTP/2

Responses

An example response:
(((SEARCH IMAGE FOR STATUS)))


Responses consist of the following elements:

The version of the HTTP protocol they follow.
A status code, indicating if the request was successful, or not, and why.
A status message, a non-authoritative short description of the status code.
HTTP headers, like those for requests.
Optionally, a body containing the fetched resource.
There are five groups of status codes which are grouped by the first digit:

1xx — Informational.
2xx — The request was successful.
3xx — The client is redirected to a different resource.
4xx — The request contains an error of some kind.
5xx — The server encountered an error fulfilling the request.
Conclusion

HTTP is an extensible protocol that is easy to use. The client-server structure, combined with the ability to simply add headers, allows HTTP to advance along with the extended capabilities of the Web.

Additional Reading [Optional]

Components of HTTP-based systems

HTTP is a client-server protocol: requests are sent by one entity, the user-agent (or a proxy on behalf of it). Most of the time the user-agent is a Web browser, but it can be anything, for example a robot that crawls the Web to populate and maintain a search engine index.

Each individual request is sent to a server, which handles it and provides an answer, called the response. Between the client and the server there are numerous entities, collectively called proxies, which perform different operations and act as gateways or caches, for example.



In reality, there are more computers between a browser and the server handling the request: there are routers, modems, and more. Thanks to the layered design of the Web, these are hidden in the network and transport layers. HTTP is on top, at the application layer. Although important to diagnose network problems, the underlying layers are mostly irrelevant to the description of HTTP.

Client: the user-agent

The user-agent is any tool that acts on the behalf of the user. This role is primarily performed by the Web browser; other possibilities are programs used by engineers and Web developers to debug their applications.

The browser is always the entity initiating the request. It is never the server (though some mechanisms have been added over the years to simulate server-initiated messages).

To present a Web page, the browser sends an original request to fetch the HTML document that represents the page. It then parses this file, making additional requests corresponding to execution scripts, layout information (CSS) to display, and sub-resources contained within the page (usually images and videos). The Web browser then mixes these resources to present to the user a complete document, the Web page. Scripts executed by the browser can fetch more resources in later phases and the browser updates the Web page accordingly.

A Web page is a hypertext document. This means some parts of displayed text are links which can be activated (usually by a click of the mouse) to fetch a new Web page, allowing the user to direct their user-agent and navigate through the Web. The browser translates these directions in HTTP requests, and further interprets the HTTP responses to present the user with a clear response.

The Web Server

On the opposite side of the communication channel, is the server, which serves the document as requested by the client. A server appears as only a single machine virtually: this is because it may actually be a collection of servers, sharing the load (load balancing) or a complex piece of software interrogating other computers (like cache, a DB server, or e-commerce servers), totally or partially generating the document on demand.

A server is not necessarily a single machine, but several server software instances can be hosted on the same machine. With HTTP/1.1 and the Host header, they may even share the same IP address.

Proxies

Between the Web browser and the server, numerous computers and machines relay the HTTP messages. Due to the layered structure of the Web stack, most of these operate at the transport, network or physical levels, becoming transparent at the HTTP layer and potentially making a significant impact on performance. Those operating at the application layers are generally called proxies. These can be transparent, forwarding on the requests they receive without altering them in any way, or non-transparent, in which case they will change the request in some way before passing it along to the server. Proxies may perform numerous functions:

caching (the cache can be public or private, like the browser cache)
filtering (like an antivirus scan or parental controls)
load balancing (to allow multiple servers to serve the different requests)
authentication (to control access to different resources)
logging (allowing the storage of historical information)
Basic aspects of HTTP

HTTP is simple

HTTP is generally designed to be simple and human readable, even with the added complexity introduced in HTTP/2 by encapsulating HTTP messages into frames. HTTP messages can be read and understood by humans, providing easier testing for developers, and reduced complexity for newcomers.

HTTP is extensible

Introduced in HTTP/1.0, HTTP headers make this protocol easy to extend and experiment with. New functionality can even be introduced by a simple agreement between a client and a server about a new header’s semantics.

HTTP is stateless, but not sessionless

HTTP is stateless: there is no link between two requests being successively carried out on the same connection. This immediately has the prospect of being problematic for users attempting to interact with certain pages coherently, for example, using e-commerce shopping baskets. There are different approaches to maintain a user state like sessions etc. you will how in the further trainings.

HTTP and connections

A connection is controlled at the transport layer, and therefore fundamentally out of scope for HTTP. Though HTTP doesn’t require the underlying transport protocol to be connection-based; only requiring it to be reliable, or not lose messages (so at minimum presenting an error). Among the two most common transport protocols on the Internet, TCP is reliable and UDP isn’t. HTTP therefore relies on the TCP standard, which is connection-based.

Before a client and server can exchange an HTTP request/response pair, they must establish a TCP connection, a process which requires several round-trips. The default behavior of HTTP/1.0 is to open a separate TCP connection for each HTTP request/response pair. This is less efficient than sharing a single TCP connection when multiple requests are sent in close succession.

In order to mitigate this flaw, HTTP/1.1 introduced pipelining (which proved difficult to implement) and persistent connections: the underlying TCP connection can be partially controlled using the Connection header. HTTP/2 went a step further by multiplexing messages over a single connection, helping keep the connection warm and more efficient.

Experiments are in progress to design a better transport protocol more suited to HTTP. For example, Google is experimenting with QUIC which builds on UDP to provide a more reliable and efficient transport protocol.
